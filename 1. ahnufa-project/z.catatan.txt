const express = require('express');
const fs = require('fs');
const path = require('path');
const app = express();
const PORT = 3000;

app.use(express.static('public'));
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// ❌ File yang tidak perlu ditampilkan isinya
const skipContent = ['.h5', '.jpg', '.jpeg', '.png', '.gif', '.exe', '.pdf', '.zip', '.rar', '.ico'];

app.get('/', (req, res) => {
  const baseDir = path.resolve(__dirname, '.../');
  const items = fs.readdirSync(baseDir);
  const folders = items.filter(item => fs.statSync(path.join(baseDir, item)).isDirectory());

  function getFilesInside(folder) {
    const full = path.join(baseDir, folder);
    const children = fs.readdirSync(full);
    return children.filter(child => {
      const p = path.join(full, child);
      return fs.statSync(p).isFile();
    });
  }

  let folderList = folders.map(folder => {
    const files = getFilesInside(folder).map(f => `
      <div style="margin-left:20px;">
        <label>
          <input type="checkbox" name="file" value="${folder}/${f}"> 📄 ${f}
        </label>
      </div>
    `).join('');

    return `
      <div class="folder-item">
        <label>
          <input type="checkbox" class="folder-check" data-folder="${folder}" onchange="checkFolder(this)">
          <button type="button" onclick="toggle('${folder}')">▶ ${folder}</button>
        </label>
        <div id="child-${folder}" style="display:none; margin-left:10px;">
          ${files}
        </div>
      </div>
    `;
  }).join('');

  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>Explorer Dinamis</title>
      <meta charset="UTF-8" />
      <style>
        body { font-family: monospace; display: flex; gap: 2rem; padding: 1em }
        #sidebar { width: 300px; border-right: 1px solid #ccc; padding-right: 1em }
        #hasil { flex: 1; }
        pre { background: #f4f4f4; padding: 1em; overflow: auto; }
        .folder-item { margin-bottom: 10px; }
        button { font-family: monospace; font-size: 1em; background: none; border: none; cursor: pointer; color: blue; }
      </style>
    </head>
    <body>
      <div id="sidebar">
        <h3>📁 Folder Tersedia</h3>
        ${folderList}
        <br>
        <button onclick="jalankan()">🧠 Jalankan</button>
      </div>

      <div id="hasil">
        <h3>📄 Hasil Index</h3>
      </div>

      <script>
        function toggle(folder) {
          const el = document.getElementById('child-' + folder);
          el.style.display = (el.style.display === 'none') ? 'block' : 'none';
        }

        function checkFolder(checkbox) {
          const folder = checkbox.getAttribute('data-folder');
          const children = document.querySelectorAll('#child-' + folder + ' input[type=checkbox]');
          children.forEach(cb => cb.checked = checkbox.checked);
        }

        async function jalankan() {
          const selectedFiles = [...document.querySelectorAll('input[name=file]:checked')].map(cb => cb.value);
          const res = await fetch('/files', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ files: selectedFiles })
          });

          const container = document.getElementById('hasil');
          container.innerHTML = '<h3>📄 Hasil Index</h3>';

          if (res.status !== 200) {
            container.innerHTML += '<p style="color:red;">❌ Gagal membaca file</p>';
            return;
          }

          const data = await res.json();
          data.forEach(file => {
            const el = document.createElement('div');
            el.innerHTML = '<h4>📄 ' + file.path + '</h4>' +
              '<pre><code>' + escapeHtml(file.content) + '</code></pre>';
            container.appendChild(el);
          });
        }

        function escapeHtml(text) {
          return text
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
        }
      </script>
    </body>
    </html>
  `);
});

app.post('/files', (req, res) => {
  const fileList = req.body.files;
  if (!Array.isArray(fileList)) {
    return res.status(400).json({ error: 'Daftar file tidak valid' });
  }

  const baseDir = path.resolve(__dirname, '../');
  const result = [];

  for (const relativePath of fileList) {
    const fullPath = path.resolve(baseDir, relativePath);
    const ext = path.extname(fullPath).toLowerCase();

    if (!fs.existsSync(fullPath) || !fs.statSync(fullPath).isFile()) continue;

    if (skipContent.includes(ext)) {
      result.push({ path: fullPath, content: '[❌ Konten file tidak ditampilkan (bukan file kode)]' });
    } else {
      const isi = fs.readFileSync(fullPath, 'utf8');
      result.push({ path: fullPath, content: isi });
    }
  }

  res.json(result);
});

app.listen(PORT, () => {
  console.log(`Server jalan di http://localhost:${PORT}`);
});
